#ifndef EXP_RS_H
#define EXP_RS_H

#pragma once

/* Warning: This file is autogenerated by cbindgen. Do not modify manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>
#define USE_F32

#if defined(USE_F32)
/**
 * Define the floating-point type based on feature flags
 */
typedef float Real;
#endif

#if defined(USE_F64)
typedef double Real;
#endif

typedef struct EvalResult {
  int32_t status;
  Real value;
  const char *error;
} EvalResult;

/**
 * Opaque EvalContext handle for C
 */
typedef struct EvalContextOpaque {
  uint8_t _private[0];
} EvalContextOpaque;

#if defined(USE_F32)
#define TEST_PRECISION 1e-6
#endif

#if defined(USE_F64)
#define TEST_PRECISION 1e-10
#endif

/**
 * Free a string allocated by exp_rs_eval error result.
 */
void exp_rs_free_error(char *ptr);

/**
 * @return EvalResult structure
 */
struct EvalResult exp_rs_eval(const char *expr);

/**
 * Create a new EvalContext and return a pointer to it
 */
struct EvalContextOpaque *exp_rs_context_new(void);

/**
 * Free an EvalContext previously created by exp_rs_context_new
 */
void exp_rs_context_free(struct EvalContextOpaque *ctx);

/**
 * Register an expression function with the given context.
 * Returns 0 on success, nonzero on error.
 */
int32_t exp_rs_context_register_expression_function(struct EvalContextOpaque *ctx,
                                                    const char *name,
                                                    const char *const *params,
                                                    uintptr_t param_count,
                                                    const char *expression);

/**
 * Set a parameter value in the context
 * Returns 0 on success, nonzero on error
 */
int32_t exp_rs_context_set_parameter(struct EvalContextOpaque *ctx, const char *name, Real value);

/**
 * @return EvalResult structure
 */
struct EvalResult exp_rs_context_eval(const char *expr, struct EvalContextOpaque *ctx);

extern void *malloc(uintptr_t size);

extern void free(void *ptr);

#endif  /* EXP_RS_H */
