#ifndef EXP_RS_H
#define EXP_RS_H

#pragma once

/* Warning: This file is autogenerated by cbindgen. Do not modify manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>
#define EXP_RS_CUSTOM_ALLOC

#if defined(USE_F32)
/**
 * Define the floating-point type based on feature flags
 */
typedef float Real;
#endif

#if !defined(USE_F32)
typedef double Real;
#endif

/**
 * Result structure returned by evaluation functions.
 *
 * This structure returns either a successful result value or an error message.
 * When status is 0, the value field contains the result of the expression evaluation.
 * When status is non-zero, the error field contains a null-terminated string with
 * the error message, which must be freed using exp_rs_free_error.
 */
typedef struct EvalResult {
  /**
   * Status code: 0 for success, non-zero for errors
   */
  int32_t status;
  /**
   * The result value (valid when status is 0)
   */
  Real value;
  /**
   * Error message (valid when status is non-zero, must be freed by caller)
   */
  const char *error;
} EvalResult;

/**
 * Opaque handle to an evaluation context for C code.
 *
 * This is an opaque type that C code can use to reference an EvalContext.
 * C code should only store and pass this pointer, never dereferencing it directly.
 */
typedef struct EvalContextOpaque {
  uint8_t _private[0];
} EvalContextOpaque;

#if defined(USE_F32)
#define TEST_PRECISION 1e-6
#endif

#if !defined(USE_F32)
#define TEST_PRECISION 1e-10
#endif

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

extern int32_t *EXP_RS_PANIC_FLAG;

extern const void *EXP_RS_LOG_FUNCTION;

void exp_rs_register_panic_handler(int32_t *flag_ptr, const void *log_func);

/**
 * Frees a string allocated by exp_rs FFI functions.
 *
 * This function should be called to free the error message string in an EvalResult
 * when status is non-zero. Not calling this function will result in a memory leak.
 *
 * # Parameters
 *
 * * `ptr` - Pointer to the string to free. Must be a pointer returned in an EvalResult error field.
 *
 * # Safety
 *
 * This function is unsafe because it dereferences a raw pointer. The caller must ensure that:
 * 1. The pointer is valid and was allocated by one of the exp_rs FFI functions
 * 2. The pointer is not used after calling this function
 * 3. The pointer is not freed more than once
 */
void exp_rs_free_error(char *ptr);

/**
 * Evaluates a mathematical expression without a context.
 *
 * This function evaluates a mathematical expression string and returns the result.
 * Without a context, only built-in functions and constants are available.
 *
 * # Parameters
 *
 * * `expr` - Null-terminated string containing the expression to evaluate
 *
 * # Returns
 *
 * An EvalResult structure containing either the result value or an error message.
 *
 * # Safety
 *
 * This function is unsafe because it dereferences a raw pointer. The caller must ensure that:
 * 1. The pointer is valid and points to a null-terminated string
 * 2. The string contains valid UTF-8 data
 */
struct EvalResult exp_rs_eval(const char *expr);

/**
 * Creates a new evaluation context.
 *
 * This function creates a new evaluation context that can be used to store
 * variables, constants, and functions for use in expressions. The context
 * must be freed with exp_rs_context_free when no longer needed.
 *
 * # Returns
 *
 * A pointer to the new context, or NULL if allocation failed.
 *
 * # Safety
 *
 * This function is safe to call from C code. The returned pointer must be
 * passed to exp_rs_context_free when no longer needed to avoid memory leaks.
 */
struct EvalContextOpaque *exp_rs_context_new(void);

/**
 * Frees an evaluation context previously created by exp_rs_context_new.
 *
 * This function releases all resources associated with the given context.
 * After calling this function, the context pointer is no longer valid and
 * should not be used.
 *
 * # Parameters
 *
 * * `ctx` - Pointer to the context to free, as returned by exp_rs_context_new
 *
 * # Safety
 *
 * This function is unsafe because it dereferences a raw pointer. The caller must ensure that:
 * 1. The pointer was returned by exp_rs_context_new
 * 2. The pointer has not already been freed
 * 3. The pointer is not used after calling this function
 */
void exp_rs_context_free(struct EvalContextOpaque *ctx);

/**
 * Register an expression function with the given context.
 *
 * This function registers a new function defined by an expression string
 * that can be called in future expression evaluations.
 *
 * # Parameters
 *
 * * `ctx` - Pointer to the context, as returned by exp_rs_context_new
 * * `name` - The name of the function to register
 * * `params` - Array of parameter names the function will accept
 * * `param_count` - Number of parameters in the array
 * * `expression` - The expression string that defines the function behavior
 *
 * # Returns
 *
 * An EvalResult structure with:
 * - status=0 on success
 * - non-zero status with an error message on failure
 *
 * When status is non-zero, the error message must be freed with exp_rs_free_error.
 */
struct EvalResult exp_rs_context_register_expression_function(struct EvalContextOpaque *ctx,
                                                              const char *name,
                                                              const char *const *params,
                                                              uintptr_t param_count,
                                                              const char *expression);

/**
 * Register a native function with the given context.
 *
 * This function registers a Rust function to be invoked from C expressions.
 * The native function will be available for use in expressions evaluated with this context.
 *
 * # Parameters
 *
 * * `ctx` - Pointer to the context, as returned by exp_rs_context_new
 * * `name` - The name of the function to register
 * * `arity` - Number of parameters the function accepts
 * * `func_ptr` - Function pointer to the implementation (C callback)
 *
 * # Returns
 *
 * An EvalResult structure with:
 * - status=0 on success
 * - non-zero status with an error message on failure
 *
 * When status is non-zero, the error message must be freed with exp_rs_free_error.
 */
struct EvalResult exp_rs_context_register_native_function(struct EvalContextOpaque *ctx,
                                                          const char *name,
                                                          uintptr_t arity,
                                                          Real (*func_ptr)(const Real*, uintptr_t));

/**
 * Set a parameter value in the context.
 *
 * This function adds or updates a variable in the evaluation context that can be
 * referenced in expressions evaluated with this context.
 *
 * # Parameters
 *
 * * `ctx` - Pointer to the context, as returned by exp_rs_context_new
 * * `name` - The name of the parameter to set
 * * `value` - The value to assign to the parameter
 *
 * # Returns
 *
 * An EvalResult structure with:
 * - status=0 on success
 * - non-zero status with an error message on failure
 *
 * When status is non-zero, the error message must be freed with exp_rs_free_error.
 */
struct EvalResult exp_rs_context_set_parameter(struct EvalContextOpaque *ctx,
                                               const char *name,
                                               Real value);

/**
 * Evaluates a mathematical expression using the given context.
 *
 * This function evaluates a mathematical expression string using the specified context,
 * which can contain variables, constants, and custom functions.
 *
 * # Parameters
 *
 * * `expr` - Null-terminated string containing the expression to evaluate
 * * `ctx` - Pointer to the context to use, as returned by exp_rs_context_new
 *
 * # Returns
 *
 * An EvalResult structure containing either the result value or an error message.
 *
 * # Safety
 *
 * This function is unsafe because it dereferences raw pointers. The caller must ensure that:
 * 1. The expression pointer is valid and points to a null-terminated string
 * 2. The string contains valid UTF-8 data
 * 3. The context pointer was returned by exp_rs_context_new and has not been freed
 */
struct EvalResult exp_rs_context_eval(const char *expr, struct EvalContextOpaque *ctx);

#if defined(EXP_RS_CUSTOM_ALLOC)
extern void *exp_rs_malloc(uintptr_t size);
#endif

#if defined(EXP_RS_CUSTOM_ALLOC)
extern void exp_rs_free(void *ptr);
#endif

#if !defined(EXP_RS_CUSTOM_ALLOC)
extern void *malloc(uintptr_t size);
#endif

#if !defined(EXP_RS_CUSTOM_ALLOC)
extern void free(void *ptr);
#endif

#ifdef __cplusplus
}  // extern "C"
#endif  // __cplusplus

#endif  /* EXP_RS_H */
