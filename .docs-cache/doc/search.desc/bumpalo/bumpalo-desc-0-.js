searchState.loadedDescShard("bumpalo", 0, "<code>bumpalo</code>\nIndicates that the initial allocation failed.\nThe <code>AllocErr</code> error indicates an allocation failure that …\nAn error returned from <code>Bump::try_alloc_try_with</code>.\nAn arena to bump allocate into.\nAn iterator over each chunk of allocated memory that an …\nAn iterator over raw pointers to chunks of allocated …\nIndicates that the initializer failed with the contained …\nAllocate an object in this <code>Bump</code> and return an exclusive …\nAllocate space for an object with the given <code>Layout</code>.\n<code>Clone</code> a slice into this <code>Bump</code> and return an exclusive …\n<code>Copy</code> a slice into this <code>Bump</code> and return an exclusive …\nAllocates a new slice of size <code>len</code> slice into this <code>Bump</code> and …\nAllocates a new slice of size <code>len</code> into this <code>Bump</code> and …\nAllocates a new slice of size <code>len</code> slice into this <code>Bump</code> and …\nAllocates a new slice of size <code>len</code> slice into this <code>Bump</code> and …\nAllocates a new slice of size <code>len</code> into this <code>Bump</code> and …\nAllocates a new slice of size <code>len</code> slice into this <code>Bump</code> and …\nAllocates a new slice of size <code>len</code> into this <code>Bump</code> and …\n<code>Copy</code> a string slice into this <code>Bump</code> and return an exclusive …\nPre-allocates space for a <code>Result</code> in this <code>Bump</code>, initializes …\nPre-allocate space for an object in this <code>Bump</code>, initializes …\nCalculates the number of bytes currently allocated across …\nCalculates the number of bytes requested from the Rust …\nThe allocation limit for this arena in bytes.\nGets the remaining capacity in the current chunk (in …\nCollection types that allocate inside a <code>Bump</code> arena.\nLike the <code>format!</code> macro, but for creating …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator over each chunk of allocated memory …\nReturns an iterator over raw pointers to chunks of …\nGet this bump arena’s minimum alignment.\nConstruct a new arena to bump allocate into.\nReset this bump allocator.\nSet the allocation limit in bytes for this arena.\nTry to allocate an object in this <code>Bump</code> and return an …\nAttempts to allocate space for an object with the given …\nLike <code>alloc_slice_clone</code> but does not panic on failure.\nLike <code>alloc_slice_copy</code>, but does not panic in case of …\nLike <code>alloc_slice_fill_clone</code> but does not panic on failure.\nSame as <code>alloc_slice_fill_copy</code> but does not panic on …\nLike <code>alloc_slice_fill_default</code> but does not panic on …\nAllocates a new slice of size <code>iter.len()</code> slice into this …\nAllocates a new slice of size <code>len</code> into this <code>Bump</code> and …\nSame as <code>alloc_str</code> but does not panic on failure.\nTries to pre-allocates space for a <code>Result</code> in this <code>Bump</code>, …\nTries to pre-allocate space for an object in this <code>Bump</code>, …\nAttempt to construct a new arena to bump allocate into.\nAttempt to construct a new arena with the specified byte …\nCreate a new <code>Bump</code> that enforces a minimum alignment and …\nCreates a <code>Vec</code> containing the arguments.\nConstruct a new arena with the specified byte capacity to …\nCreate a new <code>Bump</code> that enforces a minimum alignment.\nCreate a new <code>Bump</code> that enforces a minimum alignment and …\nThe allocator type\nError due to the allocator (see the documentation for the …\nError due to the computed capacity exceeding the collection…\nExtension trait for iterators, in order to allow …\nAugments <code>AllocErr</code> with a <code>CapacityOverflow</code> variant.\nA trait for types that support being constructed from an …\nCollect all items from an iterator, into a collection …\nCollect all items from an iterator, into a collection …\nReturns the argument unchanged.\nSimilar to <code>FromIterator::from_iter</code>, but with a given …\nCalls <code>U::from(self)</code>.\nA UTF-8 encoded, growable string.\nA contiguous growable array type with heap-allocated …\nA draining iterator for <code>String</code>.\nA possible error value when converting a <code>String</code> from a …\nA possible error value when converting a <code>String</code> from a …\nA UTF-8 encoded, growable string.\nReturns a byte slice of this <code>String</code>’s contents.\nReturns a slice of bytes that were attempted to convert to …\nConverts a <code>String</code> into a mutable string slice.\nReturns a mutable reference to the contents of this <code>String</code>.\nExtracts a string slice containing the entire <code>String</code>.\nReturns a shared reference to the allocator backing this …\nReturns this <code>String</code>’s capacity, in bytes.\nTruncates this <code>String</code>, removing all contents.\nCreates a draining iterator that removes the specified …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a new <code>String&lt;&#39;bump&gt;</code> from an iterator of <code>char</code>s.\nCreates a new <code>String</code> from a length, capacity, and pointer.\nConstruct a new <code>String&lt;&#39;bump&gt;</code> from a string slice.\nDecode a UTF-16 encoded slice <code>v</code> into a <code>String</code>, returning …\nConverts a vector of bytes to a <code>String</code>.\nConverts a slice of bytes to a string, including invalid …\nConverts a vector of bytes to a <code>String</code> without checking …\nInserts a character into this <code>String</code> at a byte position.\nInserts a string slice into this <code>String</code> at a byte position.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert this <code>String&lt;&#39;bump&gt;</code> into a <code>&amp;&#39;bump str</code>. This is …\nConverts a <code>String</code> into a byte vector.\nReturns the bytes that were attempted to convert to a …\nReturns <code>true</code> if this <code>String</code> has a length of zero.\nReturns the length of this <code>String</code>, in bytes.\nCreates a new empty <code>String</code>.\nRemoves the last character from the string buffer and …\nAppends the given <code>char</code> to the end of this <code>String</code>.\nAppends a given string slice onto the end of this <code>String</code>.\nRemoves a <code>char</code> from this <code>String</code> at a byte position and …\nRemoves the specified range in the string, and replaces it …\nEnsures that this <code>String</code>’s capacity is at least …\nEnsures that this <code>String</code>’s capacity is <code>additional</code> bytes …\nRetains only the characters specified by the predicate.\nShrinks the capacity of this <code>String</code> to match its length.\nSplits the string into two at the given index.\nShortens this <code>String</code> to the specified length.\nFetch a <code>Utf8Error</code> to get more details about the conversion …\nCreates a new empty <code>String</code> with a particular capacity.\nA draining iterator for <code>Vec&lt;&#39;bump, T&gt;</code>.\nAn iterator produced by calling <code>Vec::drain_filter</code>.\nAn iterator that moves out of a vector.\nA splicing iterator for <code>Vec</code>.\nA contiguous growable array type, written <code>Vec&lt;&#39;bump, T&gt;</code> …\nMoves all the elements of <code>other</code> into <code>Self</code>, leaving <code>other</code> …\nReturns an unsafe mutable pointer to the vector’s …\nExtracts a mutable slice of the entire vector.\nReturns the remaining items of this iterator as a mutable …\nReturns a raw pointer to the vector’s buffer, or a …\nExtracts a slice containing the entire vector.\nReturns the remaining items of this iterator as a slice.\nReturns a shared reference to the allocator backing this …\nReturns the number of elements the vector can hold without …\nClears the vector, removing all values.\nRemoves consecutive repeated elements in the vector …\nRemoves all but the first of consecutive elements in the …\nRemoves all but the first of consecutive elements in the …\nCreates a draining iterator that removes the specified …\nCreates an iterator that removes the elements in the vector\nClones and appends all elements in a slice to the <code>Vec</code>.\nCopies all elements in the slice <code>other</code> and appends them to …\nFor each slice in <code>slices</code>, copies all elements in the slice …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a new <code>Vec</code> from the given iterator’s items.\nCreates a <code>Vec&lt;&#39;bump, T&gt;</code> directly from the raw components …\nInserts an element at position <code>index</code> within the vector, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the vector into <code>&amp;&#39;bump [T]</code>.\nConverts the vector into <code>&amp;&#39;bump mut [T]</code>.\nCreates a consuming iterator, that is, one that moves each …\nReturns <code>true</code> if the vector contains no elements.\nReturns the number of elements in the vector, also …\nConstructs a new, empty <code>Vec&lt;&#39;bump, T&gt;</code>.\nRemoves the last element from a vector and returns it, or …\nAppends an element to the back of a vector.\nRemoves and returns the element at position <code>index</code> within …\nReserves capacity for at least <code>additional</code> more elements to …\nReserves the minimum capacity for exactly <code>additional</code> more …\nResizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate.\nSets the length of a vector.\nShrinks the capacity of the vector as much as possible.\nCreates a splicing iterator that replaces the specified …\nSplits the collection into two at the given index.\nRemoves an element from the vector and returns it.\nShortens the vector, keeping the first <code>len</code> elements and …\nAttempts to reserve capacity for at least <code>additional</code> more …\nAttempts to reserve the minimum capacity for exactly …\nConstructs a new, empty <code>Vec&lt;&#39;bump, T&gt;</code> with the specified …")